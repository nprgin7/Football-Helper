//   Important note about DLL memory management when your DLL uses the
//   static version of the RunTime Library:
//
//   If your DLL exports any functions that pass String objects (or structs/
//   classes containing nested Strings) as parameter or function results,
//   you will need to add the library MEMMGR.LIB to both the DLL project and
//   any other projects that use the DLL.  You will also need to use MEMMGR.LIB
//   if any other projects which use the DLL will be performing new or delete
//   operations on any non-TObject-derived classes which are exported from the
//   DLL. Adding MEMMGR.LIB to your project will change the DLL and its calling
//   EXE's to use the BORLNDMM.DLL as their memory manager.  In these cases,
//   the file BORLNDMM.DLL should be deployed along with your DLL.
//
//   To avoid using BORLNDMM.DLL, pass string information using "char *" or
//   ShortString parameters.
//
//   If your DLL uses the dynamic version of the RTL, you do not need to
//   explicitly add MEMMGR.LIB as this will be done implicitly for you

#pragma hdrstop
#pragma argsused
#include <string>



#define DllExport   __declspec( dllexport )

class Clubs {
public:
    std::string name1, name2;
    double w1, w2, d1, d2, l1, l2;
    double points1, points2;
    Clubs(std::string n1, std::string n2, double _w1, double _w2, double _d1, double _d2, double _l1, double _l2){
        w1 = _w1;
        w2 = _w2;
        d1 = _d1;
        d2 = _w2;
        l1 = _l1;
        l2 = _l2;
        name1 = n1;
        name2 = n2;
    }

    void calculatePoints(){
	points1 = w1*3 + d1 - l1;
    points2 = w2*3 + d2 - l2;
    }

    std::string betterClub(){
        if(points1 > points2){
            return name1;
        } else {
            return name2;
        }
    }
};

extern "C" int _libmain(unsigned long reason)
{
    return 1;
}
